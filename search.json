[{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://dtacled.github.io/acledR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"accessing-the-api","dir":"Articles","previous_headings":"","what":"Accessing the API","title":"Using ACLED's API","text":"use ACLED’s API, must first register account ACLED’s Access Portal. can find information registering account visiting ACLED’s access guide. three ways authenticate credentials, outlined least recommended:","code":""},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"use-acled_access-recommended","dir":"Articles","previous_headings":"Accessing the API","what":"Use acled_access() (recommended)","title":"Using ACLED's API","text":"acled_access() verifies credentials stores local environment given session. running following code, can make API requests without manually entering credentials within call.","code":"acled_access(\"your_email\", \"your_key\") # to be run every session before doing an API call."},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"store-credentials-as-environmental-variables","dir":"Articles","previous_headings":"Accessing the API","what":"Store credentials as environmental variables","title":"Using ACLED's API","text":"can alternatively store credentials permanent use across sessions. , run following: open .Renviron file. open, set: Afterwards, save file restart R session. can confirm properly stored running Sys.getenv(\"email_address\") return stored email address Sys.getenv(\"acled_key\") return stored ACLED key console. can enter credentials within API call like:","code":"file.edit(file.path(\"~\", \".Renviron\")) email_address = \"your_email\" acled_key = \"your_key\" acled_api(   email = Sys.getenv(\"email_address\"),   key = Sys.getenv(\"acled_key\"),   acled_access = FALSE,   ...)"},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"manually-enter-credentials-within-each-call-not-recommended","dir":"Articles","previous_headings":"Accessing the API","what":"Manually enter credentials within each call (not recommended)","title":"Using ACLED's API","text":"final option, can manually enter credentials within API call. recommend approach least secure, may suitable use cases. can use option following example:","code":"acled_api(   email = \"email_address\",    key = \"acled_key\",   acled_access = FALSE,   ...)"},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"acled-api","dir":"Articles","previous_headings":"","what":"ACLED API","title":"Using ACLED's API","text":"acled_api() function can use request process ACLED API calls. function takes following arguments:","code":"acled_api(email = NULL,           key = NULL,           country = NULL,           regions = NULL,           start_date = \"1997-01-01\",           end_date = Sys.Date(),           timestamp = NULL,           event_types = NULL,           population = \"none\",           monadic = FALSE,           inter_numeric = FALSE,           ...,           acled_access = TRUE,           prompt = TRUE)"},{"path":[]},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"geographical-filters","dir":"Articles","previous_headings":"Parameters for the API","what":"Geographical filters","title":"Using ACLED's API","text":"can use country regions parameters specify locations like request data. values NULL included, API return data countries regions. like request data multiple countries, can using vector country names (e.g., c(\"Argentina\",\"Spain\",\"Bolivia\")). Similarly, can request data one regions using either vector region names numeric codes. acledR::acled_countries acledR::acled_regions show full lists countries regions available. Please visit ACLED’s Knowledge Base region-specific methodology questions.","code":""},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"temporal-filters","dir":"Articles","previous_headings":"Parameters for the API","what":"Temporal filters","title":"Using ACLED's API","text":"can specify date range like receive data using start_date end_date parameters, require data “yyyy-mm-dd” format. can use timestamp parameter select data added updated specific time period. Please keep mind timestamp indicates event added modified ACLED’s dataset, meaning event occurred far past (.e., old event date) may still recent timestamp recently updated. practice, timestamp parameter typically used analysis instead used keep dataset date changes made ACLED’s data. learn keep datasets date, visit Keeping datasets date page acledR approach guide relevant Excel spreadsheet tools.","code":""},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"additional-filters","dir":"Articles","previous_headings":"Parameters for the API","what":"Additional filters","title":"Using ACLED's API","text":"can also use event_types argument filter specific event_types ACLED data. , enter event_type interest string vector strings (e.g., event_types = \"Battles\" event_types = c(\"Battles\", \"Protests\")). description available event_types ACLED’s dataset, please refer ACLED’s codebook. ACLED data defaults wide (dyadic) format, row contains multiple actor columns, actors interacting event. However, can request long (monadic) format using monadic argument. default, argument FALSE, meaning receive dyadic version data. monadic=TRUE, function return monadic (“long-form”) data frame one actor (based actor1 actor2). transforming dataset wide long without using API, transforming based different sets columns, visit acled_transform_longer(). information difference wide/dyadic monadic/long datasets, please visit API guide Finally, can use population argument specify want include estimated population exposure columns. argument takes three options, none returns extra columns, best returns population_best column, full returns estimated population columns. information, visit Conflict Exposure piece. ... parameter represents arguments might want include API query, ISO Interaction. want use filters others included list parameters described , can write &paramenter=value. instance, might wish include &iso=4 end function. can visit ACLED’s API guide learn valid parameters.","code":""},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"function-options","dir":"Articles","previous_headings":"Parameters for the API","what":"Function options","title":"Using ACLED's API","text":"can use prompt argument specify function handles API calls return large amounts data. prompt=TRUE, receive interactive prompt (see Handling big API calls immediately ). want interactive prompt (e.g., acled_api() part routine script), can set prompt = FALSE.","code":""},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"handling-big-api-calls","dir":"Articles","previous_headings":"","what":"Handling big API calls","title":"Using ACLED's API","text":"common executing API calls, handling large volumes data requires special consideration. ACLED’s case, base API uses pagination address issues, pagination can confusing newer users (see API guide detailed explanation). Fortunately, package avoids issue. Instead manual pagination, acled_api() function splits call automatically. acled_api() first estimate much data requesting. prompted message includes following: number countries data requested, number estimated events requested (based country year, event type), number API calls needed, based estimate big call , question asking whether given information number available API calls linked account – like proceed API call.","code":""},{"path":"https://dtacled.github.io/acledR/articles/acled_api.html","id":"example---requesting-data-with-acled_api","dir":"Articles","previous_headings":"","what":"Example - Requesting data with acled_api()","title":"Using ACLED's API","text":"Imagine interested events Argentina occurring June 1-30 2022 returns tibble includes ACLED event Argentina specified period: wanted data Brazil Colombia, execute following: interested events occurring larger area, may simpler omit country parameter include regions argument instead. also include event_type argument receive specific type event: can use timestamp column/filter specify dates like receive new updated data. can include argument either string (“yyyy-mm-dd”) numeric Unix timestamp: like include one type interaction (e.g., “Rioters versus Civilians (57)”), can add interaction code ... argument: also request monadic version data setting monadic = TRUE:","code":"library(acledR) library(dplyr)  #Note: This is simply an example–you will need to include your own credentials rather than the email and key placeholders that are included below.  acled_access(email = \"your_email\", key = \"your_key\")  df_ar <- acled_api(country = c(\"Argentina\"),                    start_date = \"2022-06-01\",                    end_date = \"2022-06-31\",                    monadic = F,                    acled_access = TRUE,                    prompt = F) head(df_ar, 5) #> # A tibble: 5 × 31 #>   event_id_cnty event_date  year time_precision disorder_type event_type #>   <chr>         <date>     <dbl>          <dbl> <chr>         <chr>      #> 1 ARG10607      2022-06-30  2022              1 Demostrations Protests   #> 2 ARG10626      2022-06-30  2022              1 Demostrations Protests   #> 3 ARG10618      2022-06-30  2022              1 Demostrations Protests   #> 4 ARG10615      2022-06-30  2022              1 Demostrations Protests   #> 5 ARG10627      2022-06-30  2022              1 Demostrations Protests   #> # ℹ 25 more variables: sub_event_type <chr>, actor1 <chr>, assoc_actor_1 <chr>, #> #   inter1 <dbl>, actor2 <chr>, assoc_actor_2 <chr>, inter2 <dbl>, #> #   interaction <dbl>, civilian_targeting <chr>, iso <dbl>, region <chr>, #> #   country <chr>, admin1 <chr>, admin2 <chr>, admin3 <lgl>, location <chr>, #> #   latitude <dbl>, longitude <dbl>, geo_precision <dbl>, source <chr>, #> #   source_scale <chr>, notes <chr>, fatalities <dbl>, tags <chr>, #> #   timestamp <dbl> df_br_co <- acled_api(country = c(\"Brazil\", \"Colombia\"),                       start_date = \"2022-01-01\",                       end_date = \"2022-12-01\",                       monadic = F,                       acled_access = TRUE,                       prompt = F) df_sa <- acled_api(regions = c(\"South America\"),                    start_date = \"2022-01-01\",                    end_date = \"2022-12-01\",                    event_type = \"Protests\",                    monadic = F,                    acled_access = TRUE,                    prompt = F) df_br_co <- acled_api(country = c(\"Brazil\", \"Colombia\"),                       start_date = \"2022-01-01\",                       end_date = \"2022-12-01\",                       monadic = F,                       # timestamp = \"2022-01-24\" -> in the case of string                       timestamp = 1643056974, # -> in the case of a numeric Unix timestamp                       acled_access = TRUE,                       prompt = F) df_sa <- acled_api(country = c(\"Brazil\", \"Colombia\"),                    start_date = \"2022-01-01\",                    end_date = \"2022-12-01\",                    monadic = F,                    ... = \"&interaction=57\",                    acled_access = TRUE,                    prompt = F) df_sa_monadic <- acled_api(regions = c(\"South America\"),                            start_date = \"2022-01-01\",                            end_date = \"2022-01-01\",                            monadic = T,                            acled_access = TRUE,                            prompt = F)"},{"path":"https://dtacled.github.io/acledR/articles/acled_transformations.html","id":"from-wide-to-long-format---acled_transform_longer","dir":"Articles","previous_headings":"","what":"1. From wide to long format - acled_transform_longer()","title":"Transforming ACLED data","text":"acled_transform_longer() allows switch wide long formats without need make new API call. Typical ACLED data wide format, multiple actors represented row (see ACLED API guide detailed explanation). format generally works well interested conducting event-based analyses. Still, times may wish conduct actor-based analyses might require long data format, actor separate row, single event may therefore represented multiple rows. Note wide long formats generic terms specifically referred dyadic monadic data types ACLED documentation (see ACLED endpoint guide). acled_transform_longer() requires two arguments: data: wide format ACLED dataset. type: character vector indicating columns transpose (.e. columns go wide long format). available column options upon ACLED data can transposed : full_actor: Transposes actor columns dataset (actor1, actor2, assoc_actor_1, assoc_actor_2). separate row actor associate actor involved event. generates four new columns: type_of_actor actor, inter_type inter. type_of_actor denotes original column actor found (.e. actor1, actor2, assoc_actor_1, assoc_actor_2), ‘actor’ column simply actor’s name. Similarly, inter actor’s inter code, withinter_type denoting whether code came inter1 inter2 column. main_actors: Transposes actor1 actor2. separate rows main actors . generates two new columns: type_of_actor actor. type_of_actor denotes column actor originally found, actor simply name actor. assoc_actors: Transposes assoc_actor_1 assoc_actor_2 columns. separate rows associate actors . generates two new columns: type_of_actor actor. type_of_actor denotes whether actor originally found assoc_actor_1 assoc_actor_2 column, actor simply name associate actor. Note: data still include actor1 actor2 columns. source: Transposes source column. separate row source source column. Keep mind can receive data monadic/longer form directly ACLED’s API, using function instead can provide added benefits. Specifically: can use function transform dyadic/wide dataset monadic/long dataset, thus receiving latter without executing additional API call. control columns used transforming dataset wide long format. function allows transpose following columns: actor1 & actor2, assoc_actor_1, assoc_actor_2, source. API allows receive long-format data based actor1, actor2, assoc_actor_1, assoc_actor_2, without option control want columns .","code":"acled_transform_longer(data, type = \"full_actors\")"},{"path":"https://dtacled.github.io/acledR/articles/acled_transformations.html","id":"from-long-to-wide-format---acled_transform_wider","dir":"Articles","previous_headings":"","what":"2. From long to wide format - acled_transform_wider()","title":"Transforming ACLED data","text":"acledR also offers inverse acled_transform_longer(), allowing pivot dataframe back wider format (dyadic form). function meant aid users may used acled_transform_longer() like return dataframe original state. function similar counterpart: can see, arguments acled_transform_longer(): data: wide format ACLED dataset type: character vector indicating columns transpose (columns go long wide format).","code":"acled_transform_wider(data, type = \"full_actors\")"},{"path":"https://dtacled.github.io/acledR/articles/acled_transformations.html","id":"switch-between-numeric-and-string-interaction-codes---acled_transform_interactions","dir":"Articles","previous_headings":"","what":"3. Switch between numeric and string interaction codes - acled_transform_interactions()","title":"Transforming ACLED data","text":"final function suite, acled_transform_interactions(), allows easily transition numeric interaction codes text description interaction code. can find information - including actor categories correspond numeric codes – ACLED’s codebook. acled_api() function returns interaction codes text strings default, function useful original API call included parameter value inter_numeric = TRUE. function requires two arguments: data: ACLED dataset includes inter1 inter2 variables (only_inter = F). only_inters: Boolean option whether include inter1 inter2, without including interaction. option defaults FALSE, thus including interaction column. function simply returns modified dataframe swapped inter & interaction formats. interaction column, find actor types separated “-”, example: … change …","code":"acled_transform_interactions(df, only_inters = FALSE) acledR::acled_old_dummy[39:40,] %>%   # Displaying only relevant columns   select(event_id_cnty, inter1, inter2, interaction) ## # A tibble: 2 × 4 ##   event_id_cnty inter1 inter2 interaction ##   <chr>          <dbl>  <dbl>       <dbl> ## 1 ARG10606           6      0          60 ## 2 ARG10605           5      1          15 acledR::acled_old_dummy[39:40,] %>%   acled_transform_interaction()%>%   select(event_id_cnty, inter1, inter2, interaction)%>%   head(2) ## # A tibble: 2 × 4 ##   event_id_cnty inter1     inter2       interaction          ##   <chr>         <chr>      <chr>        <chr>                ## 1 ARG10606      Protesters NA           Sole Protesters      ## 2 ARG10605      Rioters    State Forces State Forces-Rioters"},{"path":"https://dtacled.github.io/acledR/articles/acled_transformations.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Transforming ACLED data","text":"section walks potential use case transformation functions. Assume interested data “South America” first half 2023. email key values examples. replicate output, provide credentials detailed acled_api() vignette. Let’s filter events involving “ELN: National Liberation Army” primary associate actor columns: filtered events, 175 rows, meaning 175 events “ELN: National Liberation Army” involved actor associate actor. Instead filtering events involving particular actor, may wish calculate number events actor dataset participates. can difficult wide (.e., dyadic) data, actor may represented four actor columns. , simply sum number rows actor appears one particular column. simple solution transform dataset long form calculate event counts actor. can begin using acled_transform_longer() function: dataset now long form, row representing single actor single event. data, can count number rows actor, grouping unique event_id_cnty. important count rows unique identifiers transforming data long format, events can represented multiple rows equal number actors involved event. verify results, can filter actor counts “ELN: National Liberation Army”. number events matches number rows got first filtering actor.","code":"library(acledR)  acled_access(email = \"your_email\", key = \"your_key\")   df_sa <- acled_api(regions = \"South America\",                    start_date = \"2023-01-01\",                    end_date = \"2023-06-01\",                    monadic = F,                    acled_access = TRUE,                    inter_numeric = TRUE,                    prompt = F) ## Success! Credentials authorized ## Requesting data for 13 countries from 2023-01-01 to 2023-06-01 ## Processing API request ## Extracting content from API request df_eln <-   df_sa %>%    filter(     # Check main actors     actor1 == \"ELN: National Liberation Army\" |     actor2 == \"ELN: National Liberation Army\" |     # Check associate actors     assoc_actor_1 == \"ELN: National Liberation Army\" |     assoc_actor_2 == \"ELN: National Liberation Army\"     ) df_sa_long <- acled_transform_longer(df_sa, type = \"full_actors\") library(tidyr) library(dplyr)  actors_df_sa <-   df_sa_long %>%    group_by(actor) %>%   summarise(n_events = n_distinct(unique(event_id_cnty))) actors_df_sa %>%    filter(actor == \"ELN: National Liberation Army\") %>%   pull(n_events) ## [1] 175"},{"path":"https://dtacled.github.io/acledR/articles/acled_update.html","id":"keeping-track-of-updates---acled_update","dir":"Articles","previous_headings":"","what":"Keeping track of updates - acled_update()","title":"Keeping your dataset up to date","text":"detailed ACLED’s guide updating dataset, cases events updated deleted, necessitating update downloaded dataset. Unlike deleted events, separate API endpoint check updated events. events updated, timestamp changes reflect timing recent change. means, can find updated events using acledR::acled_api() providing recent timestamp (.e. max({ACLED dataset}$timestamp))) local dataset timestamp argument function. event recent timestamp event_id_cnty event downloaded dataset, event modified. Hence, can remove duplicated event smaller timestamp value. simplify process, acledR includes function makes update following steps previously explained: function following arguments: df: dataframe update. structure ACLED’s dyadic dataframe (.e. default result acled_api()) start_date: first date events want update . celling floor event_date, timestamp. example, start_date = “2023-06-01” update every event event_date equal 2023-06-01. end_date: last date events want update . celling floor event_date, timestamp. example, end_date = “2023-06-06” update every event event_date equal 2023-06-06. start_date end_date default corresponding max min event_date dataset. additional_countries: Additional countries add dataset. defaults “current countries”, includes countries inside dataset. regions: regions like events dataset updated. event_types: event types like events dataset updated. acled_access: already used acled_access(), can set option TRUE (default) avoid input email access key. email: email registered ACLED’s Access Portal. argument required acled_access = TRUE. key: key registered ACLED’s Access Portal. argument required acled_access = TRUE. deleted: TRUE, addition updating information updated events, function also remove deleted events dataset using ACLED API’s deleted endpoint. prompts: TRUE prompts call suppressed. See acled_api().","code":"acled_update(   df,   start_date = min(df$event_date),   end_date = max(df$event_date),   additional_countries = \"current countries\",   regions = NULL,   event_types = NULL,   acled_access = TRUE,   email = NULL,   key = NULL,   deleted = TRUE,   prompts = TRUE)"},{"path":"https://dtacled.github.io/acledR/articles/acled_update.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Keeping your dataset up to date","text":"section can learn use acled_update keep datasets updated. Load downloaded dataset: last time downloaded updated dataset? dataset updated since 2022-07-25, may want updated version. , can use acled_update(). Note inter_numeric parameter set TRUE original data – argen_dummy_acled_file – variables specified numeric rather strings. interested updating events already dataset, can ignore start_date end_date arguments. also wish remove deleted events dataset can set deleted=TRUE. Now dataset captures modified newly created events.","code":"library(acledR) library(lubridate) library(dplyr) acled_access(email = \"your_email\", key = \"your_key\") #  This is an example, you will need to input your credentials.  argen_dummy_acled_file <- acledR::acled_old_dummy # Here is our old personal ACLED dataset ## Success! Credentials authorized latest_timestamp_unix <- max(argen_dummy_acled_file$timestamp)  latest_timestamp <- as_datetime(latest_timestamp_unix) new_argen_dataset <- acled_update(argen_dummy_acled_file,                                    additional_countries = \"Argentina\",                                    acled_access = TRUE,                                    inter_numeric = TRUE,                                    prompts = FALSE) ## Requesting data for 1 country from 2022-06-01 to 2022-06-30 ## Processing API request ## Extracting content from API request ## Dataset updated.  ##  Old number of events: 326.  ##  New events: 1.  ##  Deleted events: 0.  ##  Total new & modified events: 164"},{"path":"https://dtacled.github.io/acledR/articles/get_started.html","id":"authenticating-your-credentials---acled_access","dir":"Articles","previous_headings":"","what":"Authenticating your credentials - acled_access()","title":"Get Started","text":"ACLED API access requires API key authentication. register API access, please visit ACLED’s Access Portal . can also find detailed guide creating account obtaining API key ACLED’s Access Guide. registered, encourage authenticating credentials using acled_access() function. Using function ensures credentials working intended saves R environment, eliminating need repeated authentication API request. authentication successful, find message console stating credentials authorized.","code":"acled_access(email = \"email@example.com\", key = \"your_key\") #  This is an example, you will need to input your credentials."},{"path":"https://dtacled.github.io/acledR/articles/get_started.html","id":"requesting-data-from-acleds-api---acled_api","dir":"Articles","previous_headings":"","what":"Requesting data from ACLED’s API - acled_api()","title":"Get Started","text":"authenticating credentials, can request data API using acled_api() function. function accepts several fields filtering formatting ACLED data. running example, let’s request events Argentina throughout 2022: Note example uses five arguments (country, start_date, end_date, inter_numeric, prompt), acled_api() accepts several useful arguments, descriptions can found vignette(\"acled_api\"). use acled_access function store credentials, also need specify email API key request. acled_api() function place constraints amount data requested. result, users able make potentially large requests (e.g. events countries years ) might strain ACLED’s API. performance reasons, acled_api() breaks large requests multiple smaller requests. can find acled_api() subsets requests visiting acled_api() vignette.","code":"argentinian_data <- acled_api(   # Country of interest   country = \"Argentina\",   # Earliest date for requested events   start_date =\"2022-01-01\",   # Last date for requested events   end_date = \"2022-12-31\",   # Request 'inter codes' in numeric rather than text form   inter_numeric = TRUE,   # Turn off acled_api() interactive prompt   prompt = FALSE   )"},{"path":"https://dtacled.github.io/acledR/articles/get_started.html","id":"updating-acled-data---acled_update","dir":"Articles","previous_headings":"","what":"Updating ACLED Data - acled_update()","title":"Get Started","text":"ACLED data regularly updated. can ensure dataset remains current using acled_update() function. acled_update() designed handle intricacies updating ACLED dataset, accounting new events, modifications existing events, event deletions. update dataset, provide acled_update function dataframe old dataset. Note options providing control dataset updated, information can found vignette(\"acled_update\"). example can use acled_update() update old dataset:","code":"new_data <- acled_update(acledR::acled_old_deletion_dummy,                           inter_numeric = TRUE,                          prompts = FALSE)"},{"path":"https://dtacled.github.io/acledR/articles/get_started.html","id":"transforming-acled-data---acled_transform_","dir":"Articles","previous_headings":"","what":"Transforming ACLED Data - acled_transform_*","title":"Get Started","text":"ACLED data unique structure can complicate data manipulation. acledR package provides suite functions simplify process. can find -depth treatment ACLED’s data transformation functions visiting vignette(\"acled_transformations\").","code":""},{"path":"https://dtacled.github.io/acledR/articles/get_started.html","id":"reshaping-data-wide-to-long-format---acled_transform_longer","dir":"Articles","previous_headings":"Transforming ACLED Data - acled_transform_*","what":"1. Reshaping Data: Wide to Long Format - acled_transform_longer()","title":"Get Started","text":"acled_transform_longer() function transforms ACLED data wide format, multiple actors represented row, long format, separate rows actor. particularly useful actor-based analyses. can specify type transformation using type argument, choosing full_actors, main_actors, assoc_actors, source. instance, specifying full_actors result transforming data frame every actor associate actor given event represented separate row. function provides flexibility control transformation process, allowing tailor data structure specific needs.","code":"long_data <- acled_transform_longer(acledR::acled_old_dummy, type = \"full_actors\")  head(long_data) #> # A tibble: 6 × 29 #>   event_id_cnty event_date  year time_precision disorder_type event_type #>   <chr>         <date>     <dbl>          <dbl> <chr>         <chr>      #> 1 ARG10607      2022-06-30  2022              1 Demostrations Protests   #> 2 ARG10607      2022-06-30  2022              1 Demostrations Protests   #> 3 ARG10607      2022-06-30  2022              1 Demostrations Protests   #> 4 ARG10607      2022-06-30  2022              1 Demostrations Protests   #> 5 ARG10607      2022-06-30  2022              1 Demostrations Protests   #> 6 ARG10607      2022-06-30  2022              1 Demostrations Protests   #> # ℹ 23 more variables: sub_event_type <chr>, type_of_actor <chr>, actor <chr>, #> #   inter_type <chr>, inter <dbl>, interaction <dbl>, civilian_targeting <chr>, #> #   iso <dbl>, region <chr>, country <chr>, admin1 <chr>, admin2 <chr>, #> #   admin3 <lgl>, location <chr>, latitude <dbl>, longitude <dbl>, #> #   geo_precision <dbl>, source <chr>, source_scale <chr>, notes <chr>, #> #   fatalities <dbl>, tags <chr>, timestamp <dbl>"},{"path":"https://dtacled.github.io/acledR/articles/get_started.html","id":"reshaping-data-long-to-wide-format---acled_transform_wider","dir":"Articles","previous_headings":"Transforming ACLED Data - acled_transform_*","what":"2. Reshaping Data: Long to Wide Format - acled_transform_wider()","title":"Get Started","text":"Conversely, acled_transform_wider() function enables pivot data back wide format. function may useful used acled_transform_longer() wish revert original data structure. Like counterpart, function requires data type arguments.","code":"wide_data <- acled_transform_wider(long_data, type = \"full_actors\")  head(wide_data) #> # A tibble: 6 × 31 #>   event_id_cnty event_date  year time_precision disorder_type event_type #>   <chr>         <date>     <dbl>          <dbl> <chr>         <chr>      #> 1 ARG10295      2022-06-01  2022              1 Demostrations Protests   #> 2 ARG10296      2022-06-01  2022              1 Demostrations Protests   #> 3 ARG10297      2022-06-01  2022              1 Demostrations Protests   #> 4 ARG10298      2022-06-01  2022              1 Demostrations Protests   #> 5 ARG10299      2022-06-01  2022              1 Demostrations Protests   #> 6 ARG10300      2022-06-02  2022              1 Demostrations Protests   #> # ℹ 25 more variables: sub_event_type <chr>, actor1 <chr>, assoc_actor_1 <chr>, #> #   inter1 <dbl>, actor2 <chr>, assoc_actor_2 <chr>, inter2 <dbl>, #> #   interaction <dbl>, civilian_targeting <chr>, iso <dbl>, region <chr>, #> #   country <chr>, admin1 <chr>, admin2 <chr>, admin3 <lgl>, location <chr>, #> #   latitude <dbl>, longitude <dbl>, geo_precision <dbl>, source <chr>, #> #   source_scale <chr>, notes <chr>, fatalities <dbl>, tags <chr>, #> #   timestamp <dbl>"},{"path":"https://dtacled.github.io/acledR/articles/get_started.html","id":"converting-interaction-codes---acled_transform_interaction","dir":"Articles","previous_headings":"Transforming ACLED Data - acled_transform_*","what":"3. Converting Interaction Codes - acled_transform_interaction()","title":"Get Started","text":"acled_transform_interaction() function allows convert numeric text interaction codes, facilitating easier interpretation analysis ACLED data. function requires ACLED dataset optional boolean argument only_inters, determines whether include inter1 inter2 columns also interaction column output. default, only_inters set FALSE. Note acled_api() function returns interaction codes text strings default, making function useful original API call included parameter value inter_numeric = TRUE, running example.","code":"transformed_data <- acled_transform_interaction(acledR::acled_old_dummy)  # Note the inter1 and inter2 columns head(transformed_data) #> # A tibble: 6 × 31 #>   event_id_cnty event_date  year time_precision disorder_type event_type #>   <chr>         <date>     <dbl>          <dbl> <chr>         <chr>      #> 1 ARG10607      2022-06-30  2022              1 Demostrations Protests   #> 2 ARG10626      2022-06-30  2022              1 Demostrations Protests   #> 3 ARG10618      2022-06-30  2022              1 Demostrations Protests   #> 4 ARG10615      2022-06-30  2022              1 Demostrations Protests   #> 5 ARG10627      2022-06-30  2022              1 Demostrations Protests   #> 6 ARG10625      2022-06-30  2022              1 Demostrations Protests   #> # ℹ 25 more variables: sub_event_type <chr>, actor1 <chr>, assoc_actor_1 <chr>, #> #   inter1 <chr>, actor2 <chr>, assoc_actor_2 <chr>, inter2 <chr>, #> #   interaction <chr>, civilian_targeting <chr>, iso <dbl>, region <chr>, #> #   country <chr>, admin1 <chr>, admin2 <chr>, admin3 <lgl>, location <chr>, #> #   latitude <dbl>, longitude <dbl>, geo_precision <dbl>, source <chr>, #> #   source_scale <chr>, notes <chr>, fatalities <dbl>, tags <chr>, #> #   timestamp <dbl>"},{"path":"https://dtacled.github.io/acledR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Armed Conflict Location Event Data ACLED. Copyright holder. Trey Billing. Author, maintainer. Lucas Fagliano. Author. Katayoun Kishi. Contributor.","code":""},{"path":"https://dtacled.github.io/acledR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Billing T, Fagliano L (2025). acledR: Manipulate ACLED Data. R package version 0.1.0, https://dtacled.github.io/acledR/.","code":"@Manual{,   title = {acledR: Manipulate ACLED Data},   author = {Trey Billing and Lucas Fagliano},   year = {2025},   note = {R package version 0.1.0},   url = {https://dtacled.github.io/acledR/}, }"},{"path":"https://dtacled.github.io/acledR/index.html","id":"acledr--acleds-official-r-package-","dir":"","previous_headings":"","what":"Manipulate ACLED Data","title":"Manipulate ACLED Data","text":"acledR official R package Armed Conflict Location Event Data Project (ACLED), providing tools extracting manipulating ACLED data. acledR site hosts information use package, including general overview Get Started page. access ACLED data, please register account developer.acleddata.com. can find detailed instructions setting account retrieving API key .","code":""},{"path":"https://dtacled.github.io/acledR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Manipulate ACLED Data","text":"","code":"# Install via cran install.packages(\"acledR\")  # Install development version from github devtools::install_github(\"dtacled/acledR\")"},{"path":"https://dtacled.github.io/acledR/reference/acledR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"acledR: Manipulate ACLED Data — acledR-package","title":"acledR: Manipulate ACLED Data — acledR-package","text":"Tools working data ACLED (Armed Conflict Location Event Data). Functions include simplified access ACLED's API (https://apidocs.acleddata.com/), methods keeping local versions ACLED data --date, functions common ACLED data transformations.","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acledR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"acledR: Manipulate ACLED Data — acledR-package","text":"Maintainer: Trey Billing t.billing@acleddata.com Authors: Lucas Fagliano lucasfagliano@gmail.com contributors: Armed Conflict Location Event Data ACLED data@acleddata.com [copyright holder] Katayoun Kishi [contributor]","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Store your ACLED access information into your session. — acled_access","title":"Store your ACLED access information into your session. — acled_access","text":"Simple function authenticate store (Sys.setenv()) ACLED access key acled_api() function. email key stored via acled_access, email key arguments acled_api can NULL.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store your ACLED access information into your session. — acled_access","text":"","code":"acled_access(email, key)"},{"path":"https://dtacled.github.io/acledR/reference/acled_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store your ACLED access information into your session. — acled_access","text":"email email register ACLED Access portal (https://developer.acleddata.com/) key key generated ACLED Access portal.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store your ACLED access information into your session. — acled_access","text":"Returns success message ACLED credentials successfully authorized","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_access.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store your ACLED access information into your session. — acled_access","text":"","code":"if (FALSE) { # \\dontrun{ acled_access(email = \"your_email\", key = \"your_key\") Sys.getenv(\"acled_email\") Sys.getenv(\"acled_key\") } # }"},{"path":"https://dtacled.github.io/acledR/reference/acled_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Request data from ACLED API — acled_api","title":"Request data from ACLED API — acled_api","text":"function allows users easily request data ACLED API. Users can include variables country, regions, dates interest format (monadic dyadic). function returns tibble desired ACLED events.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request data from ACLED API — acled_api","text":"","code":"acled_api(   email = NULL,   key = NULL,   country = NULL,   regions = NULL,   start_date = floor_date(Sys.Date(), \"year\") - years(1),   end_date = Sys.Date(),   timestamp = NULL,   event_types = NULL,   population = \"none\",   inter_numeric = FALSE,   monadic = FALSE,   ...,   acled_access = TRUE,   prompt = TRUE,   log = FALSE )"},{"path":"https://dtacled.github.io/acledR/reference/acled_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request data from ACLED API — acled_api","text":"email character string. Email associated ACLED account registered https://developer.acleddata.com. key character string. Access key associated ACLED account registered https://developer.acleddata.com. country character vector. Default NULL, return events countries. Pass vector countries names retrieve events specific countries. list ACLED countries. names may found via acledR::acled_countries. regions vector region names (character) region codes (numeric). Default NULL, return events regions.  Pass vector regions names codes retrieve events countries. within specific regions. list ACLED regions may found via acledR::acled_regions. start_date character string. Format 'yyyy-mm-dd'. earliest date return events. default 1997-01-01, earliest date available. end_date character string. Format 'yyyy-mm-dd'. latest date return events. default Sys.Date(), present date. timestamp numerical character string. Provide date datetime written either character string yyyy-mm-dd numeric Unix timestamp access events added updated date. event_types vector one event types (character). Default NULL, return data event types. reurn data specific event types, request one following options (case sensitive): Battles, Violence civilians, Protests, Riots, Strategic Developments, Explosions/Remote violence. population character. Specify whether return population estimates event. accepts three options: \"none\" (default), \"best\", \"full\". inter_numeric logical. FALSE (default), interaction code columns (inter1, inter2, interaction) returned strings describing actor types/interactions. TRUE, values returned numeric values. monadic logical. FALSE (default), returns dyadic data. TRUE, returns monadic actor1 data. ... string. additional parameters users like add API calls (e.g. interaction ISO) acled_access logical. TRUE (default), used acled_access function email key arguments required. prompt logical. TRUE (default), users receive interactive prompt providing information call (countries requested, number estimated events, number API calls required) asking want proceed call. FALSE, call continues without warning, call split returns message specifying many calls made. log logical. TRUE, provides dataframe countries days requested, many calls entails. dataframe provided INSTEAD normal ACLED dataset.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request data from ACLED API — acled_api","text":"Returns tibble ACLED events.","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request data from ACLED API — acled_api","text":"","code":"if (FALSE) { # \\dontrun{  # Get all the events coded by ACLED in Argentina from 01/01/2022 until 02/01/2022 # in dyadic-wide form argen_acled <- acled_api(   email = \"your_email\", key = \"your_key\",   country = \"Argentina\", start_date = \"2022-01-01\", end_date = \"2022-02-01\",   acled_access = FALSE )  # tibble with all the events from Argentina where each row is one event. argen_acled  # Get all events coded by ACLED in the Caribbean from 01/01/2022 to 10/01/2022 # in monadic-long form using email and key saved in environment  acled_access(email = \"your_email\", key = \"your_key\") carib_acled <- acled_api(   regions = \"Caribbean\", start_date = \"2022-01-01\",   end_date = \"2022-01-10\", monadic = TRUE, acled_access = TRUE )  ## Tibble with all the events from the Caribbean where each row is one actor carib_acled } # }"},{"path":"https://dtacled.github.io/acledR/reference/acled_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Codebook — acled_codebook","title":"ACLED Codebook — acled_codebook","text":"Codebook ACLED data","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Codebook — acled_codebook","text":"","code":"acled_codebook"},{"path":"https://dtacled.github.io/acledR/reference/acled_codebook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Codebook — acled_codebook","text":"data frame: Variable Variable names Description Text description variable Values Text description values variable","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Countries — acled_countries","title":"ACLED Countries — acled_countries","text":"ACLED country names, regions, coding start year","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Countries — acled_countries","text":"","code":"acled_countries"},{"path":"https://dtacled.github.io/acledR/reference/acled_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Countries — acled_countries","text":"data frame: country Country names region Region names start_year First year coded ACLED","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_deletions_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Request data from the ACLED Deletions API — acled_deletions_api","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"function allows users pull deleted ACLED event IDs Deletions API.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_deletions_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"","code":"acled_deletions_api(   email = NULL,   key = NULL,   date_deleted = NULL,   acled_access = TRUE,   log = FALSE )"},{"path":"https://dtacled.github.io/acledR/reference/acled_deletions_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"email character string. Email associated ACLED account registered https://developer.acleddata.com. key character string. Access key associated ACLED account registered https://developer.acleddata.com. date_deleted character string. Format 'yyyy-mm-dd' Unix timestamp. query return deleted events including requested date/timestamp. acled_access logical. TRUE means utilized acled_access function need email key arguments. log testing purposes: can use check variables call handled properly.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_deletions_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"Returns tibble ACLED data columns event_id_cnty deleted_timestamp.","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_deletions_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request data from the ACLED Deletions API — acled_deletions_api","text":"","code":"if (FALSE) { # \\dontrun{  # Request deleted ACLED events since January 1, 2022 acled_deletions_api(date_deleted = \"2022-01-01\", acled_acess = TRUE) } # }"},{"path":"https://dtacled.github.io/acledR/reference/acled_event_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Event Categories — acled_event_categories","title":"ACLED Event Categories — acled_event_categories","text":"ACLED event sub-event types, grouped category","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_event_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Event Categories — acled_event_categories","text":"","code":"acled_event_categories"},{"path":"https://dtacled.github.io/acledR/reference/acled_event_categories.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Event Categories — acled_event_categories","text":"data frame: event_type ACLED event type sub_event_type ACLED sub-event type political_violence Dummy indicator whether sub-event type falls within political violence organized_political_violence Dummy indicator whether sub-event type falls within organized political violence disorder Dummy indicator whether sub-event type falls within disorder demonstrations Dummy indicator whether sub-event type falls within demonstrations","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_interaction_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED interaction codes — acled_interaction_codes","title":"ACLED interaction codes — acled_interaction_codes","text":"ACLED interaction actor types","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_interaction_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED interaction codes — acled_interaction_codes","text":"","code":"acled_interaction_codes"},{"path":"https://dtacled.github.io/acledR/reference/acled_interaction_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED interaction codes — acled_interaction_codes","text":"data frame: Inter1/Inter2 Actor type Numeric Code Numeric equivalent found inter1 inter2 column.","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_multipliers.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Multipliers — acled_multipliers","title":"ACLED Multipliers — acled_multipliers","text":"dataframe additional information country, purpose estimating events.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_multipliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Multipliers — acled_multipliers","text":"","code":"acled_multipliers"},{"path":"https://dtacled.github.io/acledR/reference/acled_multipliers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Multipliers — acled_multipliers","text":"data frame: country Country names bin Bin event frequency year Year corresponding bin avg_month_bin Average monthly bin","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_old_deletion_dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Second dummy data frame of ACLED events emulating an old format, used in acled_deletion_api Vignette — acled_old_deletion_dummy","title":"Second dummy data frame of ACLED events emulating an old format, used in acled_deletion_api Vignette — acled_old_deletion_dummy","text":"Large dataset multiple regions countries, purposefully including deleted/modified events.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_old_deletion_dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Second dummy data frame of ACLED events emulating an old format, used in acled_deletion_api Vignette — acled_old_deletion_dummy","text":"","code":"acled_old_deletion_dummy"},{"path":"https://dtacled.github.io/acledR/reference/acled_old_deletion_dummy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Second dummy data frame of ACLED events emulating an old format, used in acled_deletion_api Vignette — acled_old_deletion_dummy","text":"data frame: event_id_cnty unique individual identifier number country acronym (updated annually) event_date day, month year event took place year year event took place time_precision numeric code indicating level certainty date coded event disorder_type Type disorder associated event sub event type event_type type event sub_event_type type sub-event actor1 named actor involved event. Note: Actor 1 Actor 2 imply directionality (e.g. attacker defender) assoc_actor_1 named actor associated identifying actor1 inter1 numeric code indicating type actor1 actor2 named actor involved event. Note: Actor 1 Actor 2 imply directionality (e.g. attacker defender) assoc_actor_2 named actor associated identifying actor1 inter2 numeric code indicating type actor1 interaction numeric code indicating interaction types actor1 actor2 civilian_targeting Column referencing presence civilian targeting iso numeric code individual country region region world event took place country country event took place admin1 largest sub-national administrative region event took place admin2 second largest sub-national administrative region event took place admin3 third largest sub-national administrative region event took place location location event took place latitude latitude location longitude longitude location geo_precision numeric code indicating level certainty location coded event source source event report source_scale scale (local, regional, national, international) source notes short description event fatalities number reported fatalities occurred event tags Tags associated event. timestamp Numeric code time","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_old_dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"A dummy data frame of ACLED events emulating an old format, used in ","title":"A dummy data frame of ACLED events emulating an old format, used in ","text":"Small dataset events Argentina, purposefully including events currently deleted/modified.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_old_dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A dummy data frame of ACLED events emulating an old format, used in ","text":"","code":"acled_old_dummy"},{"path":"https://dtacled.github.io/acledR/reference/acled_old_dummy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A dummy data frame of ACLED events emulating an old format, used in ","text":"data frame: event_id_cnty unique individual identifier number country acronym (updated annually) event_date day, month year event took place year year event took place time_precision numeric code indicating level certainty date coded event disorder_type Type disorder associated event sub event type event_type type event sub_event_type type sub-event actor1 named actor involved event. Note: Actor 1 Actor 2 imply directionality (e.g. attacker defender) assoc_actor_1 named actor associated identifying actor1 inter1 numeric code indicating type actor1 actor2 named actor involved event. Note: Actor 1 Actor 2 imply directionality (e.g. attacker defender) assoc_actor_2 named actor associated identifying actor1 inter2 numeric code indicating type actor1 interaction numeric code indicating interaction types actor1 actor2 civilian_targeting Column referencing presence civilian targeting iso numeric code individual country region region world event took place country country event took place admin1 largest sub-national administrative region event took place admin2 second largest sub-national administrative region event took place admin3 third largest sub-national administrative region event took place location location event took place latitude latitude location longitude longitude location geo_precision numeric code indicating level certainty location coded event source source event report source_scale scale (local, regional, national, international) source notes short description event fatalities number reported fatalities occurred event tags Tags associated event. timestamp Numeric code time","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"ACLED Regions — acled_regions","title":"ACLED Regions — acled_regions","text":"ACLED region names, region numbers, coding start dates","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACLED Regions — acled_regions","text":"","code":"acled_regions"},{"path":"https://dtacled.github.io/acledR/reference/acled_regions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ACLED Regions — acled_regions","text":"data frame: region Region number region_name Region names first_event_date First date (yyyy-mm-dd) coded ACLED","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounding function — acled_rounding","title":"Rounding function — acled_rounding","text":"function addresses conflicts rounding R, especially trying round .","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounding function — acled_rounding","text":"","code":"acled_rounding(num, digits = 0)"},{"path":"https://dtacled.github.io/acledR/reference/acled_rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounding function — acled_rounding","text":"num int. number trying round. digits int. want round . accepts 0 (whole number), 1 (tenth place), 2 (hundredths), etc.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_rounding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rounding function — acled_rounding","text":"rounded numeric value","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_rounding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rounding function — acled_rounding","text":"function meant address problem rounding R approach always round even. function meant round things following simple rule. decimal 5+ round , round . 'digits' argument, one can set specificity rounding, 0= whole number, 1 = tenth place, 2=hundreds place, .","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rounding function — acled_rounding","text":"","code":"x1 <- 1.569 x2 <- 104.530 x3 <- 54.430 x4 <- 205.49999 acled_rounding(x1) #> [1] 2 acled_rounding(x2) #> [1] 105 acled_rounding(x3) #> [1] 54 acled_rounding(x4) #> [1] 205"},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","title":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","text":"function allows users change numeric interaction codes (.e. 1, 2, 3, etc) string interaction codes (.e. State Forces, Rebel Group, etc.)","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","text":"","code":"acled_transform_interaction(df, only_inters = FALSE)"},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","text":"df dataframe. ACLED data including least inter1, inter2 columns. only_inters TRUE, also requires interaction column. only_inters boolean. Option whether include interaction column transformation (TRUE) use inter1 inter2 (FALSE).","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","text":"Returns tibble ACLED events modified inter1, inter2 potentially interaction columns .","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change interaction codes from numeric labels to string labels — acled_transform_interaction","text":"","code":"if (FALSE) { # \\dontrun{  # Load data frame argen_acled <- acled_api(   email = \"your_email\", key = \"your_key\",   country = \"Argentina\", start_date = \"2022-01-01\", end_date = \"2022-02-01\",   acled_access = FALSE )  # Transform the interactions argen_acled_transformed <- acled_transformation_interaction(argen_acled, only_inters = F) } # }"},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform ACLED data from wide to long — acled_transform_longer","title":"Transform ACLED data from wide to long — acled_transform_longer","text":"Function convert ACLED's API calls (dyadic) desired monadic forms.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_longer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform ACLED data from wide to long — acled_transform_longer","text":"","code":"acled_transform_longer(data, type = \"full_actors\")"},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_longer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform ACLED data from wide to long — acled_transform_longer","text":"data, dataframe tibble containing dataset. type, character string. One five types: full_actors, main_actors, assoc_actors, source, . full_actors: actor associated actor columns main_actors: Actor 1 Actor 2 columns assoc_actors: associated actor columns source: source column becomes monadic","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_longer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform ACLED data from wide to long — acled_transform_longer","text":"tibble data transformed long form.","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_longer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform ACLED data from wide to long — acled_transform_longer","text":"","code":"if (FALSE) { # \\dontrun{ # argen_acled <- acled_api(country = \"Argentina\",start_date = \"2022-01-01\", #                          end_date=\"2022-02-01\", acled_access = T, prompt = F)  # argen_acled_long_actors <- acled_transform_wide_to_long(argen_acled, #                                            type = \"full_actor\") # Transforming the data  # nrow(argen_acled_long_actors) # Number of rows in the dataset # [1] 263 # Long form  # nrow(argen_acled) ) # Number of rows in the dataset # [1] 145 # Wide form } # }"},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","title":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","text":"Function convert ACLED's API calls (monadic) back original dyadic forms.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","text":"","code":"acled_transform_wider(data, type = \"full_actors\")"},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","text":"data, dataframe tibble containing dataset. type, character string. One five types: full_actors, main_actors, assoc_actors, source, . full_actors: actor associated actor columns main_actors: Actor 1 Actor 2 columns assoc_actors: associated actor columns source: source column becomes dyadic api_monadic: Use option data output API's monadic option.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","text":"tibble data transformed back wide form.","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_transform_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Transform ACLED Data from Long to Wide — acled_transform_wider","text":"","code":"if (FALSE) { # \\dontrun{ # argen_acled <- acled_api(country = \"Argentina\",start_date = \"2022-01-01\", #                          end_date=\"2022-02-01\", acled_access = T, prompt = F) # argen_acled_long_actors <- acled_transform_longer(argen_acled, #                        type = \"full_actor\") # Transforming the data to long form  # argen_acled_wide <- acled_transform_wider(argen_acled_long_actors, #                        type = \"full_actor\") # Transforming the data back to wide form  # nrow(argen_acled_wide) # Number of rows in the dataset # [1] 145 # Wide form  # nrow(argen_acled_long_actors) # Number of rows in the dataset # [1] 263 # Long form } # }"},{"path":"https://dtacled.github.io/acledR/reference/acled_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Updating your ACLED dataset — acled_update","title":"Updating your ACLED dataset — acled_update","text":"function meant help keep dataset updated, automatically checking new modified events, well deleted events (deleted = TRUE). Note: function makes new API calls gather new modified events.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updating your ACLED dataset — acled_update","text":"","code":"acled_update(   df,   start_date = min(df$event_date),   end_date = max(df$event_date),   additional_countries = \"current countries\",   regions = NULL,   event_types = NULL,   acled_access = TRUE,   email = NULL,   key = NULL,   inter_numeric = FALSE,   deleted = TRUE,   prompts = TRUE )"},{"path":"https://dtacled.github.io/acledR/reference/acled_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updating your ACLED dataset — acled_update","text":"df dataframe update, structure ACLED's dyadic dataframe (.e. result acled_api()) start_date first date events want update .. celling floor event_date, timestamp. end_date last date events want update . celling floor event_date, timestamp. additional_countries string. Additional additional_countries update dataset. defaults “current countries”, includes additional_countries inside dataset. regions string. regions like events dataset updated. event_types string. event types like events dataset updated. acled_access logical. already used acled_access(), can set option TRUE (default) avoid input email access key. email character string. Email associated ACLED account registered https://developer.acleddata.com. key character string. Access key associated ACLED account registered https://developer.acleddata.com. inter_numeric logical. FALSE (default), interaction code columns (inter1, inter2, interaction) returned strings describing actor types/interactions. TRUE, values returned numeric values. Must match inter type (numeric string) dataframe updated. deleted logical. TRUE (default), function also remove deleted events using acled_deletions_api(). prompts logical. TRUE (default), users receive interactive prompt providing information call (additional_countries requested, number country-days, number API calls required) asking want proceed call. FALSE, call continues without warning, call split returns message specifying many calls made.","code":""},{"path":"https://dtacled.github.io/acledR/reference/acled_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updating your ACLED dataset — acled_update","text":"Tibble updated ACLED data newer timestamp.","code":""},{"path":[]},{"path":"https://dtacled.github.io/acledR/reference/acled_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updating your ACLED dataset — acled_update","text":"","code":"if (FALSE) { # \\dontrun{ # Updating dataset to include newer data from Argentina  acledR::acled_access(email = \"your_email\", key = \"your_key\")  new_argen_dataset <- acled_update(acledR::acled_old_dummy,   additional_countries = \"Argentina\",   acled_access = TRUE,   prompts = FALSE ) } # }"},{"path":"https://dtacled.github.io/acledR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://dtacled.github.io/acledR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://dtacled.github.io/acledR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://dtacled.github.io/acledR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://dtacled.github.io/acledR/news/index.html","id":"acledr-010","dir":"Changelog","previous_headings":"","what":"acledR 0.1.0","title":"acledR 0.1.0","text":"CRAN release: 2025-02-24 Initial CRAN submission.","code":""}]
